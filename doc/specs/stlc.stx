// s is the target scope of a path p
tgt(p,s) :- p match
  { end(x)       -> s = x
  | edge(x,l,xs) -> tgt(xs,s)
  }.

// s is the source scope of a path p
src(p,s) :- p match
  { end(x)       -> s = x
  | edge(x,l,xs) -> s = x
  }.

// d is the datum of the target of p
datum(p,d) :- {s} tgt(p, s), s -> d.

// declares (x:t) in scope s
decl(s,x,t) :- {sd} new sd, s -[ Decl ]-> sd, sd -> pair(x,t).

// (x:ty) is the only reachable declaration over `P*`Decl with name x from scope s
lookup(s,x,ty) :- {dec, ans, ps, qs, p}
    query s `P*`Decl as ans
  , filter ans (pair(y, ty) where y = x) ps
  , min ps lexico(Decl < P) qs
  , only(qs, p)
  , datum(p, dec)
  , dec match { pair(y,typ) -> ty = typ }.

typeBinders(s, bs) :- bs match
  { cons(triple(x,ty,e), xs) ->
       decl(s,x,ty)
     , typeBinders(s, xs)
     , typeOf(s, e, ty)
  | nil()                    -> true
  }.

// ty is the type of lambda expression e in scope s
//   e ::= lam(x, ty, body) | var(x()) | zero() | suc()
typeOf(s, e, ty) :- e match
  { var(x) -> lookup(s, x, ty)

  // lambda abstraction
  | lam(x, ta, body) -> {sbody, tb}
          new sbody
	, sbody -[ P ]-> s
	, decl(sbody, x, ta)
	, typeOf(sbody, body, tb)
	, ty = fun(ta, tb)

  // lambda application
  | app(f, e) -> {ta}
          typeOf(s, f, fun(ta, ty))
	, typeOf(s, e, ta)

  // letrec
  | letrec(bs, e) -> {sletrec}
          new sletrec
	, sletrec -[ P ]-> s
        , typeBinders(sletrec, bs)
	, typeOf(sletrec, e, ty)

  // natural numbers
  | zero() -> ty = nat()
  | suc(x) -> typeOf(s, x, nat()), ty = nat()
  }.

// ty is the type of *closed* lambda expression e
typeClosed(e, ty) :- {top} new top, typeOf(top, e, ty).

// letrec x = y; y = 0 in x
// Type of the declarations are inferred from RHS.
example(ty, tyx, tyy) :- typeClosed(
    letrec(
      cons(triple(x(), tyx, var(y())),
      cons(triple(y(), tyy, zero()),
      nil())),
      var(x())
    ),
    ty
  ).

// letrec x = 0; x = 0 in x
// Ambiguous, does not type check. 
// This is specified by the variable resolution rules in `lookup`.
example1() :- {ty, tyx, tyy} typeClosed(
    letrec(
      cons(triple(x(), tyx, zero()),
      cons(triple(x(), tyy, zero()),
      nil())),
      var(x())
    ),
    ty
  ).

// letrec x = y; z = 0 in x
// Unbound occurence of y, does not type check.
example2() :- {ty, tyx, tyy} typeClosed(
    letrec(
      cons(triple(x(), tyx, var(y())),
      cons(triple(z(), tyy, zero()),
      nil())),
      var(x())
    ),
    ty
  ).
