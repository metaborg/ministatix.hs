// s is the target scope of a path p
tgt(p,s) :- p match
  { end(x)       -> s = x
  | edge(x,l,xs) -> tgt(xs,s)
  }.

// s is the source scope of a path p
src(p,s) :- p match
  { end(x)       -> s = x
  | edge(x,l,xs) -> s = x
  }.

// d is the datum of the target of p
datum(p,d) :- {s} tgt(p, s), s -> d.

// declares term variable (x:t) in scope s
decl(s,x,t)   :- {sd} new sd, s -[ `Decl ]-> sd, sd -> Pair(x,t).
newTyVar(s,X,Y) :- new Y, s -[ `TyDecl ]-> Y, Y -> X.

// (x:ty) is the only reachable declaration over `P*`Decl with name x from scope s
lookup(s,x,ty) :- {dec, ans, ps, qs, p}
    query s `P*`Decl as ans
  , filter ans (Pair(y, ty) where y = x) ps
  , min ps lexico(`Decl < `P) qs
  , only(qs, p)
  , datum(p, dec)
  , dec match {Pair(y,typ) -> ty = typ}.

lookupTyVar(s,X,T) :- {tys, matches, closest, p, X'}
        query s `P*`TyDecl as tys
      , filter tys (Z where Z = X) matches
      , min matches lexico(`TyDecl < `P) closest
      , only(closest, p)
      , tgt(p, X')
      , T = TyVar(X').

typeOf(s, e, ty) :- e match
  // variables
  { var(x) -> lookup(s, x, ty)

  // Absbda abstraction
  | Abs(x, ta, body) -> {TA, sbody, TB}
          new sbody
	, sbody -[ `P ]-> s
	, decl(sbody, x, TA)
	, typeOf(sbody, body, TB)
	, interp(s, ta, TA)
	, ty = Fun(TA, TB)

  // Absbda Application
  | App(f, e) -> {ta}
          typeOf(s, f, Fun(ta, ty))
	, typeOf(s, e, ta)

  // type abstraction
  | TAbs(X, body) -> {sbody, TA, Q} 
          new sbody
	, sbody -[ `P ]-> s
	, newTyVar(sbody, X, Q)
	, typeOf(sbody, body, TA)
	, ty = Forall(Q, TA)

  // type Application
  | TApp(F, t) -> {X, T, A} 
          interp(s, t, T)
        , typeOf(s, F, Forall(X, A))
	, subst(X, A, T, ty)

  // natural numbers
  | Zero() -> ty = Nat()
  | Suc(x) -> typeOf(s, x, Nat()), ty = Nat()
  }.

// interpret syntactic types
interp(s,ty,ty') :- ty match 
  { TyVar(X) -> {tys, matches, closest, p}
        lookupTyVar(s, X, ty')
  | fun(a, b) -> {A, B}
        interp(s, a, A)
      , interp(s, b, B)
      , ty' = Fun(A, B)
  | forall(X, a) -> {A, s', X'}
        new s'
      , s' -[ `P ]-> s
      , newTyVar(s', X, X')
      , interp(s', a, a)
      , ty' = Forall(X', A)
  | nat() -> ty' = Nat()
  }.

// Substitute eagerly in a semantic type.
// Because we use semantic types this is trivally capture avoiding.
subst(N, t, s, out) :- t match
  { Forall(alpha, r) -> {r'}
        subst(N, r, s, r')
      , out = Forall(alpha, r')
  | Fun(a, b) -> {A, B}
        subst(N, a, s, A)
      , subst(N, b, s, B)
      , out = Fun(A, B)
  | Nat() ->
        out = Nat()
  | TyVar(X) where X = N ->
        out = s
  | TyVar(X) ->
        out = X
  }.

// ty is the type of *closed* Absbda expression e
typeClosed(e, ty) :- {top} new top, typeOf(top, e, ty).

//---------------------------------------------------------------------
// some unit tests

// [] ⊢ (Λ X . λ x:X . Zero) [ nat ] : nat → nat
testTApp1(ty) :- typeClosed(
  TApp(
   TAbs(X(),
    Abs(x(), TyVar(X()), Zero())),
   nat()),
  ty).

// [] ⊢ (Λ X . λ x:X . Λ Y . λ y:Y. Zero) [ nat ] : nat → ∀ Y . Y → nat
testTApp2(ty) :- typeClosed(
  TApp(
   TAbs(X(),
    Abs(x(), TyVar(X()),
     TAbs(Y(),
      Abs(y(), TyVar(Y()), Zero())))),
   nat()),
  ty).

// [] ⊢ (Λ X . Λ Y . λ y:Y . Zero) [ nat ] : ∀ Y . Y → nat
testTApp3(ty) :- typeClosed(
  TApp(
   TAbs(X(),
    TAbs(Y(),
     Abs(y(), TyVar(Y()), Zero()))),
   nat()),
  ty).

// [] ⊢ (Λ X . λ x:nat. Λ X . λ (y:X) . Zero) [ nat ] : nat → ∀ X . X → nat
testTApp4(ty) :- typeClosed(
  TApp(
   TAbs(X(),
    Abs(x(), nat(),
     TAbs(X(),
      Abs(y(), TyVar(X()), Zero())))),
    nat()),
  ty).

// [] ⊢ Λ X . (Λ Y. λ y:Y . Zero) [ X ] : ∀ X . X → nat
testTApp5(ty) :- typeClosed(
  TAbs(X(),
    TApp(
      TAbs(Y(), Abs(y(), TyVar(Y()), Zero())),
      TyVar(X())
    )
  ),
  ty
).
